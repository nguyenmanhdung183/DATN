#ifndef RFID_H
#define RFID_H

#include <SPI.h>
#include <MFRC522.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "wifi_and_firebase.h"


class RFID_Door {
      /*
  VCC    3.3V
  GND    GND
  SCK    18 YELLOW
  MOSI   23 WHITE
  MISO   19 GREEN
  SDA/SS 5 ORANGE
  RST    15 BLUE
  */
private:
    int SERVO;
    bool state = false; // M·∫∑c ƒë·ªãnh l√† ƒë√≥ng c·ª≠a
    MFRC522 rfid; // ƒê·ªëi t∆∞·ª£ng RFID
    String pw ="1234"; // M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
    Servo myServo;
    const byte validUID[2][4] = {
        {0xC3, 0x74, 0xCD, 0x28}, // Th·∫ª 1
        {0x33, 0xA2, 0x3F, 0x14}  // Th·∫ª 2
    };
    int validUIDCount = 2; // S·ªë l∆∞·ª£ng th·∫ª h·ª£p l·ªá

public:
    RFID_Door(int SS,int RS, int SERVO) : rfid(SS, RS) { // Kh·ªüi t·∫°o RFID v·ªõi ch√¢n SS
        this->SERVO = SERVO;
    }

    void init() {
        SPI.begin(); // Kh·ªüi t·∫°o SPI (ESP32 t·ª± ƒë·ªông x·ª≠ l√Ω c√°c ch√¢n)
        rfid.PCD_Init(); // Kh·ªüi t·∫°o RFID
        myServo.attach(SERVO); // G√°n ch√¢n ƒëi·ªÅu khi·ªÉn servo
        myServo.write(0); // ƒê·∫∑t servo v·ªÅ v·ªã tr√≠ ƒë√≥ng c·ª≠a
    }
    
    bool getState() {
        return state;
    }

    void setState(bool newState) {
        state = newState;
    }

    void turnServo(int angle) {
        myServo.write(angle);
    }

    void openDoor() {
        Serial.println("‚úÖ M·ªü c·ª≠a...");
        turnServo(0); // M·ªü c·ª≠a
        state = true;
    }

    void closeDoor() {
        Serial.println("üîí ƒê√≥ng c·ª≠a...");
        turnServo(112); // ƒê√≥ng c·ª≠a
        state = false;
    }

    bool isValidUID() {
        // Ki·ªÉm tra n·∫øu UID h·ª£p l·ªá
        for (int i = 0; i < validUIDCount; i++) {
            if (memcmp(rfid.uid.uidByte, validUID[i], 4) == 0) {
                return true;
            }
        }
        return false;
    }

    void printUID() {
        Serial.print("UID: ");
        for (byte i = 0; i < rfid.uid.size; i++) {
            Serial.print(rfid.uid.uidByte[i], HEX);
            Serial.print(" ");
        }
        Serial.println();
    }

    bool checkCard() {
        bool rt = false;  // Declare rt variable
        //Serial.println("‚è≥ ƒêang ch·ªù th·∫ª...");
        if (!rfid.PICC_IsNewCardPresent()) return rt;  // Ki·ªÉm tra th·∫ª m·ªõi
        if (!rfid.PICC_ReadCardSerial()) return rt;   // ƒê·ªçc serial c·ªßa th·∫ª

        //printUID(); // In UID ra Serial Monitor
        Serial.print("checking...");
        if (isValidUID()) {
            Serial.println("‚úÖ Th·∫ª h·ª£p l·ªá");
            rt = true;
        } else {
            Serial.println("‚õî Th·∫ª kh√¥ng h·ª£p l·ªá!");
        }

        rfid.PICC_HaltA();  // D·ª´ng giao ti·∫øp v·ªõi th·∫ª
        rfid.PCD_StopCrypto1(); // D·ª´ng m√£ h√≥a d·ªØ li·ªáu
        return rt;
    }
    bool checkPassword(String input) {
        if (input == pw) {
            Serial.println("‚úÖ M·∫≠t kh·∫©u h·ª£p l·ªá");
            return true;
        } else {
            Serial.println("‚õî M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!");
            return false;
        }
    }
    void updatePassword(String newPassword) {
        if(newPassword != pw) {
            pw = newPassword; // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            Serial.println("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: " + pw);
        }
    }
    void updateToFB(){
        String path = did + "/status"; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn tr·∫°ng th√°i c·ª≠a
        if (state) {
            uploadData(path, "on"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i l√† "on"
        } else {
            uploadData(path, "off"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i l√† "off"
        }
    }

};

#endif