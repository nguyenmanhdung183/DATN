#include <SPI.h>
#include <MFRC522.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define USER_ID "TcJzM8sKGeWkiaeQJgR7e6G5qxq1"
#define RoomID "374566167"
#define doorID "503832430" // password: 1234, status: on/off
#define DEVICE_ID "esp32w2"

String did ="/" + String(RoomID) + "/" + String(doorID); // ƒê∆∞·ªùng d·∫´n ƒë·∫øn thi·∫øt b·ªã
bool uploadData(String path, String data);

class RFID_Door {
      /*
  VCC    3.3V
  GND    GND
  SCK    18 YELLOW
  MOSI   23 WHITE
  MISO   19 GREEN
  SDA/SS 5 ORANGE
  RST    15 BLUE
  */
private:
    int SERVO;
    bool state = false; // M·∫∑c ƒë·ªãnh l√† ƒë√≥ng c·ª≠a
    MFRC522 rfid; // ƒê·ªëi t∆∞·ª£ng RFID
    String pw ="1234"; // M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
    Servo myServo;
    const byte validUID[2][4] = {
        {0xC3, 0x74, 0xCD, 0x28}, // Th·∫ª 1
        {0x33, 0xA2, 0x3F, 0x14}  // Th·∫ª 2
    };
    int validUIDCount = 2; // S·ªë l∆∞·ª£ng th·∫ª h·ª£p l·ªá

public:
    RFID_Door(int SS,int RS, int SERVO) : rfid(SS, RS) { // Kh·ªüi t·∫°o RFID v·ªõi ch√¢n SS
        this->SERVO = SERVO;
    }

    void init() {
        SPI.begin(); // Kh·ªüi t·∫°o SPI (ESP32 t·ª± ƒë·ªông x·ª≠ l√Ω c√°c ch√¢n)
        rfid.PCD_Init(); // Kh·ªüi t·∫°o RFID
        myServo.attach(SERVO); // G√°n ch√¢n ƒëi·ªÅu khi·ªÉn servo
        myServo.write(0); // ƒê·∫∑t servo v·ªÅ v·ªã tr√≠ ƒë√≥ng c·ª≠a
    }
    
    bool getState() {
        return state;
    }

    void setState(bool newState) {
        state = newState;
    }

    void turnServo(int angle) {
        myServo.write(angle);
    }

    void openDoor() {
        Serial.println("‚úÖ M·ªü c·ª≠a...");
        turnServo(0); // M·ªü c·ª≠a
        state = true;
    }

    void closeDoor() {
        Serial.println("üîí ƒê√≥ng c·ª≠a...");
        turnServo(112); // ƒê√≥ng c·ª≠a
        state = false;
    }

    bool isValidUID() {
        // Ki·ªÉm tra n·∫øu UID h·ª£p l·ªá
        for (int i = 0; i < validUIDCount; i++) {
            if (memcmp(rfid.uid.uidByte, validUID[i], 4) == 0) {
                return true;
            }
        }
        return false;
    }

    void printUID() {
        Serial.print("UID: ");
        for (byte i = 0; i < rfid.uid.size; i++) {
            Serial.print(rfid.uid.uidByte[i], HEX);
            Serial.print(" ");
        }
        Serial.println();
    }

    bool checkCard() {
        bool rt = false;  // Declare rt variable
        //Serial.println("‚è≥ ƒêang ch·ªù th·∫ª...");
        if (!rfid.PICC_IsNewCardPresent()) return rt;  // Ki·ªÉm tra th·∫ª m·ªõi
        if (!rfid.PICC_ReadCardSerial()) return rt;   // ƒê·ªçc serial c·ªßa th·∫ª

        //printUID(); // In UID ra Serial Monitor
        Serial.print("checking...");
        if (isValidUID()) {
            Serial.println("‚úÖ Th·∫ª h·ª£p l·ªá");
            rt = true;
        } else {
            Serial.println("‚õî Th·∫ª kh√¥ng h·ª£p l·ªá!");
        }

        rfid.PICC_HaltA();  // D·ª´ng giao ti·∫øp v·ªõi th·∫ª
        rfid.PCD_StopCrypto1(); // D·ª´ng m√£ h√≥a d·ªØ li·ªáu
        return rt;
    }
    bool checkPassword(String input) {
        if (input == pw) {
            Serial.println("‚úÖ M·∫≠t kh·∫©u h·ª£p l·ªá");
            return true;
        } else {
            Serial.println("‚õî M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!");
            return false;
        }
    }
    void updatePassword(String newPassword) {
        if(newPassword != pw) {
            pw = newPassword; // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            Serial.println("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: " + pw);
        }
    }
    void updateToFB(){
        String path = did + "/status"; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn tr·∫°ng th√°i c·ª≠a
        if (state) {
            uploadData(path, "on"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i l√† "on"
        } else {
            uploadData(path, "off"); // C·∫≠p nh·∫≠t tr·∫°ng th√°i l√† "off"
        }
    }

};
class OLED {
    private:
        // Th√¥ng s·ªë m√†n h√¨nh OLED
        static constexpr int SCREEN_WIDTH = 128;
        static constexpr int SCREEN_HEIGHT = 64;
        static constexpr int OLED_RESET = -1;
        static constexpr int SCREEN_ADDRESS = 0x3C;
    
        // Ch√¢n I2C c·ªßa ESP32
        static constexpr int SDA = 21;
        static constexpr int SCL = 22;
        unsigned long previousMillis = 0; 
        unsigned long currentMillis = 0;
        const long interval = 2000;
        Adafruit_SSD1306 display;
    
    public:
        OLED() : display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET) {}
    
        void init() {
            Wire.begin(SDA, SCL); // Kh·ªüi t·∫°o I2C
    
            if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
                Serial.println(F("OLED kh√¥ng t√¨m th·∫•y! Ki·ªÉm tra k·∫øt n·ªëi."));
                while (true); // D·ª´ng ch∆∞∆°ng tr√¨nh
            }
    
            display.clearDisplay();
            display.setTextSize(2);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(10, 25);
            display.print("Hello!");
            display.display();
            showHome();
        }
        void goToHomeScreen(){
            currentMillis = millis();
            if(currentMillis - previousMillis >= interval){
                previousMillis = currentMillis;
                showHome();
            }
        }
        void updatePrevious(){
            previousMillis = millis();
        }
    
        void clearDisplay() {
            display.clearDisplay();
            display.display();
        }
    
        void showText(const String& text, int x, int y) {
            display.clearDisplay(); // X√≥a m√†n h√¨nh tr∆∞·ªõc khi in ch·ªØ m·ªõi
            display.setCursor(x, y);
            display.print(text);
            display.display();
        }
    
        void showPassword(String pw){
            display.clearDisplay();
            display.setCursor(20, 15);
            display.print("Password");
            int textWidth = pw.length() * (6 * 2);
            int xStart = (128-textWidth)/2;
            display.setCursor(xStart, 40);
            display.print(pw);
            display.display();
        }
        void showWrongPassword(){
            display.clearDisplay();
            display.setCursor(35, 15);
            display.print("Wrong");
            display.setCursor(20, 35);
            display.print("Password");
            display.display();
        }
        void showCardAccepted(){
            display.clearDisplay();
            display.setCursor(40, 15);
            display.print("Card");
            display.setCursor(20, 35);
            display.print("Accepted");
            display.display();
    
        }
        void showCardRejected(){
            display.clearDisplay();
            display.setCursor(40, 15);
            display.print("Card");
            display.setCursor(20, 35);
            display.print("Rejected");
            display.display();
    
        }
        void showOK(){
            display.clearDisplay();
            display.setCursor(30, 15);
            display.print("OK!!!!");
            display.display();
    
        }
        void showHome(){
            display.clearDisplay();
            display.setCursor(10, 15);
            display.print("SmartHome");
            display.setCursor(18, 40);
            display.print("20213838");
            display.display();
        }
        void showCloseDoor(){
            display.clearDisplay();
            display.setCursor(5, 15);
            display.print("Close Door");
            display.display();
        }
        void showOpenDoor(){
            display.clearDisplay();
            display.setCursor(5, 15);
            display.print("Open Door");
            display.display();
        }

    };
class keyBoard {
        private:
          const int rows = 3;
          String str ="";
          const int cols = 4;
          //const int rowPins[3] = {34, 35, 32};  // Ch√¢n h√†ng (INPUT, PULLDOWN ngo√†i)
          const int rowPins[3] = {14,12,13};  // Ch√¢n h√†ng (INPUT, PULLDOWN ngo√†i)
          const int colPins[4] = {27, 26, 25, 33};  // Ch√¢n c·ªôt (OUTPUT)
          
          unsigned long lastDebounceTime[3][4] = {0};  // L∆∞u th·ªùi gian debounce
          bool lastButtonState[3][4] = {false};  // Tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ c·ªßa ph√≠m
          bool buttonState[3][4] = {false};  // Tr·∫°ng th√°i hi·ªán t·∫°i
          bool keyPressed[3][4] = {false};  // L∆∞u tr·∫°ng th√°i ph√≠m ƒë√£ nh·∫•n ƒë·ªÉ tr√°nh l·∫∑p l·∫°i nh·∫•n li√™n t·ª•c
          unsigned long debounceDelay = 100;  // Th·ªùi gian debounce (20ms)
      
          String arr2[3][4] = {
              {"1", "4", "7", "L"},
              {"2", "5", "8", "0"},
              {"3", "6", "9", "R"}
          };
      
        public:
          keyBoard() {}
      
          void init() {
              // C√†i ƒë·∫∑t c√°c ch√¢n h√†ng v√† c·ªôt
              for (int i = 0; i < rows; i++) {
                  pinMode(rowPins[i], INPUT_PULLDOWN);  // D√πng ƒëi·ªán tr·ªü Pull-Down ngo√†i
              }
              for (int j = 0; j < cols; j++) {
                  pinMode(colPins[j], OUTPUT);
                  digitalWrite(colPins[j], LOW);  // ƒê·∫∑t ban ƒë·∫ßu l√† LOW
              }
          }
      
          void reset() {
              // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ph√≠m ƒë√£ nh·∫•n
              for (int i = 0; i < rows; i++) {
                  for (int j = 0; j < cols; j++) {
                      keyPressed[i][j] = false;
                      buttonState[i][j] = false;  // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ph√≠m
                      lastButtonState[i][j] = false;  // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥
                      lastDebounceTime[i][j] = 0;  // ƒê·∫∑t l·∫°i th·ªùi gian debounce
                  }
              }
          }
          String getPressKey() {
              String rt = "null";
              unsigned long currentTime = millis();
      
              // Qu√©t qua c√°c c·ªôt
              for (int i = 0; i < cols; i++) {
                  digitalWrite(colPins[i], HIGH);  // K√≠ch ho·∫°t c·ªôt
      
                  // Qu√©t qua c√°c h√†ng
                  for (int j = 0; j < rows; j++) {
                      bool reading = digitalRead(rowPins[j]);  // ƒê·ªçc tr·∫°ng th√°i ph√≠m
      
                      // Ki·ªÉm tra debounce
                      if (reading != lastButtonState[j][i]) {
                          lastDebounceTime[j][i] = currentTime;  // L∆∞u l·∫°i th·ªùi gian khi c√≥ thay ƒë·ªïi
                      }
      
                      if ((currentTime - lastDebounceTime[j][i]) > debounceDelay) {
                          if (reading == HIGH && !keyPressed[j][i]) {  // Ph√≠m ƒë∆∞·ª£c nh·∫•n l·∫ßn ƒë·∫ßu
                              rt = arr2[j][i];  // L∆∞u ph√≠m nh·∫•n
                              keyPressed[j][i] = true;  // ƒê√°nh d·∫•u l√† ƒë√£ nh·∫•n
                          } 
                          else if (reading == LOW && keyPressed[j][i]) {  // Ph√≠m ƒë∆∞·ª£c th·∫£ ra
                              keyPressed[j][i] = false;  // ƒê√°nh d·∫•u l√† ph√≠m ƒë√£ ƒë∆∞·ª£c th·∫£
                          }
                          buttonState[j][i] = reading;  // C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªán t·∫°i
                      }
      
                      lastButtonState[j][i] = reading;  // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥
                  }
      
                  digitalWrite(colPins[i], LOW);  // T·∫Øt c·ªôt
              }
      
              return rt;  // Tr·∫£ v·ªÅ ph√≠m ƒë√£ nh·∫•n ho·∫∑c "null" n·∫øu kh√¥ng c√≥ ph√≠m nh·∫•n
          }
      
      
          void updateStr(String a){
              str += a;
      
          }
      
      
          String getStr(){
              return str;  // Tr·∫£ v·ªÅ chu·ªói str
          }   
          void deleteStr(){
              str = "";  // X√≥a chu·ªói str
          }
      };
#if 1 // Firebase & Wifi
      #include <WiFi.h>
      #include "time.h"  // Th∆∞ vi·ªán ƒë·ªÉ l·∫•y th·ªùi gian t·ª´ Internet
      #include <Firebase_ESP_Client.h>
      
      // Th√¥ng tin WiFi c·ªßa b·∫°n
      #define WIFI_SSID "realme"
      #define WIFI_PASSWORD "123456789@"
      
      // Th√¥ng tin Firebase
      #define FIREBASE_HOST "https://datn20213838-default-rtdb.asia-southeast1.firebasedatabase.app/"
      #define FIREBASE_AUTH "TOpAxHzBbyQz0WatMvL0WUwC4a8EHPFogT0j0i1Y"  
      
      FirebaseData fbdo;
      FirebaseAuth auth;
      FirebaseConfig config;
      
      // Thi·∫øt b·ªã
      #define DEVICE_ID "esp32w2"
      
      // C·∫•u h√¨nh NTP
      const char* ntpServer = "pool.ntp.org";  
      const long  gmtOffset_sec = 7 * 3600; // GMT+7 (Vi·ªát Nam)
      const int   daylightOffset_sec = 0;   
      
      void setupWifiFirebase(){
          // K·∫øt n·ªëi WiFi
          WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
          Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
          while (WiFi.status() != WL_CONNECTED) {
              Serial.print(".");
              delay(500);
          }
          Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
      
          // ƒê·ªìng b·ªô th·ªùi gian qua NTP
          configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
          Serial.println("‚è≥ ƒêang ƒë·ªìng b·ªô th·ªùi gian...");
          delay(2000); // Ch·ªù l·∫•y d·ªØ li·ªáu th·ªùi gian t·ª´ NTP
      
          // C·∫•u h√¨nh Firebase
          config.host = FIREBASE_HOST;
          config.signer.tokens.legacy_token = FIREBASE_AUTH;
          Firebase.begin(&config, &auth);
          Firebase.reconnectWiFi(true);
      }
      
      String generateKey() {
          unsigned long timestamp = millis();  // Th·ªùi gian t√≠nh t·ª´ l√∫c ESP32 kh·ªüi ƒë·ªông
          int randomNum = random(1000, 9999);  // S·ªë ng·∫´u nhi√™n ƒë·ªÉ tr√°nh tr√πng key
          return String(timestamp) + "_" + String(randomNum);
      }
      
      // ‚úÖ L·∫•y th·ªùi gian t·ª´ NTP
      String getCurrentTime() {
          struct tm timeinfo;
          if (!getLocalTime(&timeinfo)) {
              Serial.println("‚ùå L·ªói l·∫•y th·ªùi gian!");
              return "00.00.00.01.01.1970"; 
          }
      
          char timeStr[20];
          sprintf(timeStr, "%02d.%02d.%02d.%02d.%02d.%04d",
                  timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, 
                  timeinfo.tm_mday, timeinfo.tm_mon + 1, timeinfo.tm_year + 1900);
      
          return String(timeStr);
      }
          
      // ‚úÖ ƒê·ªçc tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ Firebase
      String downloadData(String path) {
          path = String(USER_ID) + path;  // G√°n USER_ID v√†o ƒë∆∞·ªùng d·∫´n
          if (Firebase.RTDB.getString(&fbdo, path)) {
              String status = fbdo.stringData();
             // Serial.println("Tr·∫°ng th√°i thi·∫øt b·ªã: " + status);
              return status;
          }
          return "error";
      }
      
      // ‚úÖ Upload d·ªØ li·ªáu l√™n Firebase
      bool uploadData(String path, String data) {// path : /a/b
          path = String(USER_ID) + path;  // G√°n USER_ID v√†o ƒë∆∞·ªùng d·∫´n
          if (Firebase.RTDB.setString(&fbdo, path, data)) {
              Serial.println("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
              return true;
          } else {
              Serial.println("L·ªói c·∫≠p nh·∫≠t: " + fbdo.errorReason());
          }
          return false;
      }
      
      // ‚úÖ G·ª≠i th√¥ng b√°o l√™n Firebase
      void pushNotification(String text, String deviceId) {
          String currentTime = getCurrentTime();  // L·∫•y th·ªùi gian th·ª±c
          String idtime = deviceId + "." + currentTime;
      
          // T·∫°o push key th·ªß c√¥ng
          String pushKey = generateKey(); 
      
          // ƒê∆∞·ªùng d·∫´n Firebase v·ªõi USER_ID
          String pathText =  "/main/noti/" + pushKey + "/text";
          String pathTime =  "/main/noti/" + pushKey + "/time";
          String pathNewestId = "/main/newestNoti";
      
          // Upload d·ªØ li·ªáu
          bool textUploaded = uploadData(pathText, text);
          bool timeUploaded = uploadData(pathTime, idtime);
          bool newestId = uploadData(pathNewestId, idtime);
      
          if (textUploaded && timeUploaded && newestId) {
              Serial.println("‚úÖ Push Notification Sent: " + pushKey);
          } else {
              Serial.println("‚ùå Error sending push notification");
          }
      }
#endif      


// pin ko th·ªÉ d√πng khi d√πng wifi 34 35 36 39  
// T·∫°o ƒë·ªëi t∆∞·ª£ng RFID_Door v·ªõi ch√¢n SS l√† 5 v√† servo k·∫øt n·ªëi v·ªõi ch√¢n 12
RFID_Door door(5,15, 2);// ch√¢n th·ª© 3 l√† servo 5V (12) /18 23 19 5 22 12 15
OLED oled; // T·∫°o ƒë·ªëi t∆∞·ª£ng OLED SDA=21 SCL=22
keyBoard kb; // pin: 34 35 32 27 26 25 33
bool isTypePW = false;

void StreamDoorData(){
    static unsigned long lastTime = 0;
    unsigned long currentTime = millis(); 
    if (currentTime - lastTime > 1000) {  // G·ª≠i d·ªØ li·ªáu m·ªói 10 gi√¢y
      lastTime = currentTime;
        String st = downloadData(did + "/status"); // ƒê·ªçc tr·∫°ng th√°i t·ª´ Firebase
        if (st == "on") {
           if(!door.getState()) {
                door.openDoor(); // N·∫øu tr·∫°ng th√°i l√† "on" th√¨ m·ªü c·ª≠a
                oled.showOpenDoor(); // Hi·ªÉn th·ªã th√¥ng b√°o m·ªü c·ª≠a
                oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
            }
        } else if (st == "off") {
           if(door.getState()) {
                door.closeDoor(); // N·∫øu tr·∫°ng th√°i l√† "off" th√¨ ƒë√≥ng c·ª≠a
                oled.showCloseDoor(); // Hi·ªÉn th·ªã th√¥ng b√°o ƒë√≥ng c·ª≠a
                oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
            }
        } else {
            Serial.println("‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!");
            Serial.println("Tr·∫°ng th√°i: " + st);
        }
        String pw = downloadData(did+"/password"); // ƒê·ªçc m·∫≠t kh·∫©u t·ª´ Firebase
        door.updatePassword(pw); // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    }
}
void allDoor(){
    StreamDoorData(); // G·ª≠i d·ªØ li·ªáu tr·∫°ng th√°i c·ª≠a
    if (door.checkCard()) {
        if (door.getState()) {
            door.closeDoor(); // N·∫øu c·ª≠a ƒëang m·ªü th√¨ ƒë√≥ng l·∫°i
            door.updateToFB(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª≠a l√™n Firebase
            oled.showCloseDoor();
            oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
            isTypePW = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i nh·∫≠p m·∫≠t kh·∫©u
        } else {
            door.openDoor(); // N·∫øu c·ª≠a ƒëang ƒë√≥ng th√¨ m·ªü ra
            oled.showCardAccepted(); // Hi·ªÉn th·ªã th√¥ng b√°o m·ªü c·ª≠a
            oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
            door.updateToFB(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª≠a l√™n Firebase
            isTypePW = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i nh·∫≠p m·∫≠t kh·∫©u
        }
    }

    String key = kb.getPressKey(); // L·∫•y ph√≠m nh·∫•n t·ª´ b√†n ph√≠m
    if (key != "null") {
        isTypePW = true;
        Serial.println(key); // In ph√≠m nh·∫•n ra Serial Monitor
        if (key == "L") {
            kb.deleteStr(); // X√≥a chu·ªói khi nh·∫•n L
            oled.showPassword(kb.getStr());
        } else if (key == "R") {
            oled.showPassword(kb.getStr());
            if(door.getState() && kb.getStr() == "") {
                door.closeDoor();
                door.updateToFB(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª≠a l√™n Firebase
                oled.showCloseDoor(); // N·∫øu c·ª≠a ƒëang m·ªü th√¨ ƒë√≥ng l·∫°i
                oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
                isTypePW = false;
                
            }else{
                if(door.checkPassword(kb.getStr())) {
                    door.openDoor(); // N·∫øu m·∫≠t kh·∫©u ƒë√∫ng th√¨ m·ªü c·ª≠a
                    door.updateToFB(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª≠a l√™n Firebase
                    oled.showOK();
                    oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
                    isTypePW = false;
                } else {
                    oled.showWrongPassword();
                    oled.updatePrevious(); // C·∫≠p nh·∫≠t th·ªùi gian tr∆∞·ªõc ƒë√≥
                    isTypePW = false;
                }
            }
            kb.deleteStr(); // X√≥a chu·ªói sau khi ki·ªÉm tra m·∫≠t kh·∫©u
        } else {
            kb.updateStr(key);
            oled.showPassword(kb.getStr());
            isTypePW = true; // ƒê√°nh d·∫•u l√† ƒëang nh·∫≠p m·∫≠t kh·∫©u
        }
        kb.reset(); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i b√†n ph√≠m sau khi nh·∫•n
    }

   //delay(500); // Ch·ªù 500ms ƒë·ªÉ tr√°nh tr√πng l·∫∑p qu√° nhanh
   if(!isTypePW){
    oled.goToHomeScreen();
   }
}
void setup() {
    setupWifiFirebase(); // K·∫øt n·ªëi WiFi v√† Firebase
    Serial.begin(115200);
    door.init();
    oled.init();
    kb.init();

}

void loop() {
   allDoor(); 
}
 